{"id":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","dependencies":[{"name":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\package.json","includedInParent":true,"mtime":1610473604000},{"name":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\package.json","includedInParent":true,"mtime":1610722452654},{"name":"./decode.mjs","loc":{"line":3,"column":30},"parent":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\address\\encodeDerived.mjs","resolved":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\address\\decode.mjs"},{"name":"./encode.mjs","loc":{"line":4,"column":30},"parent":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\address\\encodeDerived.mjs","resolved":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\address\\encode.mjs"},{"name":"./keyDerived.mjs","loc":{"line":5,"column":33},"parent":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\address\\encodeDerived.mjs","resolved":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\address\\keyDerived.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeDerivedAddress = encodeDerivedAddress;\n\nvar _decode = require(\"./decode.mjs\");\n\nvar _encode = require(\"./encode.mjs\");\n\nvar _keyDerived = require(\"./keyDerived.mjs\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name encodeDerivedAddress\n * @summary Creates a derived address as used in Substrate utility.\n * @description\n * Creates a Substrate derived address based on the input address/publicKey and the index supplied.\n */\nfunction encodeDerivedAddress(who, index, ss58Format) {\n  return (0, _encode.encodeAddress)((0, _keyDerived.createKeyDerived)((0, _decode.decodeAddress)(who), index), ss58Format);\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":5,"column":0}},{"generated":{"line":14,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":1,"column":0}},{"generated":{"line":15,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":6,"column":0}},{"generated":{"line":18,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":7,"column":0}},{"generated":{"line":19,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":8,"column":0}},{"generated":{"line":20,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":9,"column":0}},{"generated":{"line":21,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":10,"column":0}},{"generated":{"line":22,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":11,"column":0}},{"generated":{"line":23,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":13,"column":7}},{"name":"encodeDerivedAddress","generated":{"line":23,"column":9},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":13,"column":16}},{"generated":{"line":23,"column":29},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":13,"column":7}},{"name":"who","generated":{"line":23,"column":30},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":13,"column":37}},{"generated":{"line":23,"column":33},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":13,"column":7}},{"name":"index","generated":{"line":23,"column":35},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":13,"column":42}},{"generated":{"line":23,"column":40},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":13,"column":7}},{"name":"ss58Format","generated":{"line":23,"column":42},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":13,"column":49}},{"generated":{"line":23,"column":52},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":13,"column":7}},{"generated":{"line":23,"column":54},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":13,"column":61}},{"generated":{"line":24,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":2}},{"generated":{"line":24,"column":9},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":9}},{"generated":{"line":24,"column":36},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":23}},{"generated":{"line":24,"column":70},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":40}},{"name":"who","generated":{"line":24,"column":97},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":54}},{"generated":{"line":24,"column":100},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":40}},{"generated":{"line":24,"column":101},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":23}},{"name":"index","generated":{"line":24,"column":103},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":60}},{"generated":{"line":24,"column":108},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":23}},{"generated":{"line":24,"column":109},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":9}},{"name":"ss58Format","generated":{"line":24,"column":111},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":68}},{"generated":{"line":24,"column":121},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":9}},{"generated":{"line":24,"column":122},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":14,"column":2}},{"generated":{"line":25,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs","original":{"line":15,"column":1}}],"sources":{"../../../node_modules/@polkadot/util-crypto/address/encodeDerived.mjs":"// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { decodeAddress } from \"./decode.mjs\";\nimport { encodeAddress } from \"./encode.mjs\";\nimport { createKeyDerived } from \"./keyDerived.mjs\";\n/**\n * @name encodeDerivedAddress\n * @summary Creates a derived address as used in Substrate utility.\n * @description\n * Creates a Substrate derived address based on the input address/publicKey and the index supplied.\n */\n\nexport function encodeDerivedAddress(who, index, ss58Format) {\n  return encodeAddress(createKeyDerived(decodeAddress(who), index), ss58Format);\n}"},"lineCount":null}},"error":null,"hash":"f1e35a4bb7301eae18058debab6e84b8","cacheData":{"env":{}}}