{"id":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","dependencies":[{"name":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\package.json","includedInParent":true,"mtime":1610473604000},{"name":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\package.json","includedInParent":true,"mtime":1610722452654},{"name":"./encode.mjs","loc":{"line":3,"column":30},"parent":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\address\\encodeMulti.mjs","resolved":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\address\\encode.mjs"},{"name":"./keyMulti.mjs","loc":{"line":4,"column":31},"parent":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\address\\encodeMulti.mjs","resolved":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\address\\keyMulti.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeMultiAddress = encodeMultiAddress;\n\nvar _encode = require(\"./encode.mjs\");\n\nvar _keyMulti = require(\"./keyMulti.mjs\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name encodeMultiAddress\n * @summary Creates a multisig address.\n * @description\n * Creates a Substrate multisig address based on the input address and the required threshold.\n */\nfunction encodeMultiAddress(who, threshold, ss58Format) {\n  return (0, _encode.encodeAddress)((0, _keyMulti.createKeyMulti)(who, threshold), ss58Format);\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":5,"column":0}},{"generated":{"line":16,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":6,"column":0}},{"generated":{"line":17,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":7,"column":0}},{"generated":{"line":18,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":8,"column":0}},{"generated":{"line":19,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":9,"column":0}},{"generated":{"line":20,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":10,"column":0}},{"generated":{"line":21,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":12,"column":7}},{"name":"encodeMultiAddress","generated":{"line":21,"column":9},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":12,"column":16}},{"generated":{"line":21,"column":27},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":12,"column":7}},{"name":"who","generated":{"line":21,"column":28},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":12,"column":35}},{"generated":{"line":21,"column":31},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":12,"column":7}},{"name":"threshold","generated":{"line":21,"column":33},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":12,"column":40}},{"generated":{"line":21,"column":42},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":12,"column":7}},{"name":"ss58Format","generated":{"line":21,"column":44},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":12,"column":51}},{"generated":{"line":21,"column":54},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":12,"column":7}},{"generated":{"line":21,"column":56},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":12,"column":63}},{"generated":{"line":22,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":13,"column":2}},{"generated":{"line":22,"column":9},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":13,"column":9}},{"generated":{"line":22,"column":36},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":13,"column":23}},{"name":"who","generated":{"line":22,"column":66},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":13,"column":38}},{"generated":{"line":22,"column":69},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":13,"column":23}},{"name":"threshold","generated":{"line":22,"column":71},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":13,"column":43}},{"generated":{"line":22,"column":80},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":13,"column":23}},{"generated":{"line":22,"column":81},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":13,"column":9}},{"name":"ss58Format","generated":{"line":22,"column":83},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":13,"column":55}},{"generated":{"line":22,"column":93},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":13,"column":9}},{"generated":{"line":22,"column":94},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":13,"column":2}},{"generated":{"line":23,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs","original":{"line":14,"column":1}}],"sources":{"../../../node_modules/@polkadot/util-crypto/address/encodeMulti.mjs":"// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { encodeAddress } from \"./encode.mjs\";\nimport { createKeyMulti } from \"./keyMulti.mjs\";\n/**\n * @name encodeMultiAddress\n * @summary Creates a multisig address.\n * @description\n * Creates a Substrate multisig address based on the input address and the required threshold.\n */\n\nexport function encodeMultiAddress(who, threshold, ss58Format) {\n  return encodeAddress(createKeyMulti(who, threshold), ss58Format);\n}"},"lineCount":null}},"error":null,"hash":"0dd65cd3feb0e93c13cd2ed240056c48","cacheData":{"env":{}}}