{"id":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","dependencies":[{"name":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\package.json","includedInParent":true,"mtime":1612061180532},{"name":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\package.json","includedInParent":true,"mtime":1610722452654},{"name":"@polkadot/util","loc":{"line":3,"column":38},"parent":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\base58\\encode.mjs","resolved":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util\\index.mjs"},{"name":"./bs58.mjs","loc":{"line":4,"column":21},"parent":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\base58\\encode.mjs","resolved":"C:\\Users\\brett\\Workspace\\hackathon\\encode\\aurum_wallet\\node_modules\\@polkadot\\util-crypto\\base58\\bs58.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.base58Encode = base58Encode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs58.mjs\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name base58Encode\n * @summary Creates a base58 value.\n * @description\n * From the provided input, create the base58 and return the result as a string.\n */\nfunction base58Encode(value, ipfsCompat) {\n  const out = _bs.bs58.encode((0, _util.u8aToBuffer)((0, _util.u8aToU8a)(value)));\n\n  return ipfsCompat ? `z${out}` : out;\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":5,"column":0}},{"generated":{"line":16,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":6,"column":0}},{"generated":{"line":17,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":7,"column":0}},{"generated":{"line":18,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":8,"column":0}},{"generated":{"line":19,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":9,"column":0}},{"generated":{"line":20,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":10,"column":0}},{"generated":{"line":21,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":12,"column":7}},{"name":"base58Encode","generated":{"line":21,"column":9},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":12,"column":16}},{"generated":{"line":21,"column":21},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":12,"column":7}},{"name":"value","generated":{"line":21,"column":22},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":12,"column":29}},{"generated":{"line":21,"column":27},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":12,"column":7}},{"name":"ipfsCompat","generated":{"line":21,"column":29},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":12,"column":36}},{"generated":{"line":21,"column":39},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":12,"column":7}},{"generated":{"line":21,"column":41},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":12,"column":48}},{"generated":{"line":22,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":2}},{"name":"out","generated":{"line":22,"column":8},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":8}},{"generated":{"line":22,"column":11},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":11}},{"name":"bs58","generated":{"line":22,"column":14},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":14}},{"name":"encode","generated":{"line":22,"column":23},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":19}},{"generated":{"line":22,"column":29},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":14}},{"generated":{"line":22,"column":30},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":26}},{"generated":{"line":22,"column":53},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":38}},{"name":"value","generated":{"line":22,"column":73},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":47}},{"generated":{"line":22,"column":78},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":38}},{"generated":{"line":22,"column":79},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":26}},{"generated":{"line":22,"column":80},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":14}},{"generated":{"line":22,"column":81},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":13,"column":2}},{"generated":{"line":24,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":14,"column":2}},{"name":"ipfsCompat","generated":{"line":24,"column":9},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":14,"column":9}},{"generated":{"line":24,"column":19},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":14,"column":19}},{"generated":{"line":24,"column":22},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":14,"column":23}},{"name":"out","generated":{"line":24,"column":26},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":14,"column":26}},{"generated":{"line":24,"column":29},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":14,"column":30}},{"generated":{"line":24,"column":31},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":14,"column":19}},{"name":"out","generated":{"line":24,"column":34},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":14,"column":34}},{"generated":{"line":24,"column":37},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":14,"column":2}},{"generated":{"line":25,"column":0},"source":"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs","original":{"line":15,"column":1}}],"sources":{"../../../node_modules/@polkadot/util-crypto/base58/encode.mjs":"// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aToBuffer, u8aToU8a } from '@polkadot/util';\nimport { bs58 } from \"./bs58.mjs\";\n/**\n * @name base58Encode\n * @summary Creates a base58 value.\n * @description\n * From the provided input, create the base58 and return the result as a string.\n */\n\nexport function base58Encode(value, ipfsCompat) {\n  const out = bs58.encode(u8aToBuffer(u8aToU8a(value)));\n  return ipfsCompat ? `z${out}` : out;\n}"},"lineCount":null}},"error":null,"hash":"147e21b17f0f54de24f9b108066d39a4","cacheData":{"env":{}}}